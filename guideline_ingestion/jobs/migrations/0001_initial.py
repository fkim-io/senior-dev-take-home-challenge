# Generated by Django 5.1.11 on 2025-07-03 08:50

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Job",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "event_id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        help_text="Public UUID for client tracking, generated automatically",
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        db_index=True,
                        default="PENDING",
                        help_text="Current job processing status",
                        max_length=20,
                    ),
                ),
                (
                    "input_data",
                    models.JSONField(
                        help_text="Original guidelines and metadata submitted by client"
                    ),
                ),
                (
                    "result",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="GPT chain outputs: summary and checklist",
                        null=True,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Detailed error message if job fails",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Job submission timestamp",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Last status update timestamp"
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, help_text="When worker began processing", null=True
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When job finished (success or failure)",
                        null=True,
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Number of retry attempts"
                    ),
                ),
            ],
            options={
                "db_table": "jobs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["event_id"], name="jobs_event_id_idx"),
                    models.Index(fields=["status"], name="jobs_status_idx"),
                    models.Index(fields=["created_at"], name="jobs_created_at_idx"),
                    models.Index(fields=["updated_at"], name="jobs_updated_at_idx"),
                    models.Index(
                        fields=["status", "created_at"], name="jobs_status_created_idx"
                    ),
                    models.Index(
                        condition=models.Q(("status__in", ["FAILED", "PROCESSING"])),
                        fields=["status", "retry_count"],
                        name="jobs_status_retry_idx",
                    ),
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("retry_count__gte", 0)),
                        name="jobs_retry_count_non_negative",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(
                                models.Q(
                                    ("started_at__isnull", True), ("status", "PENDING")
                                ),
                                models.Q(
                                    ("started_at__isnull", False),
                                    ("status", "PROCESSING"),
                                ),
                                ("status__in", ["COMPLETED", "FAILED"]),
                                _connector="OR",
                            )
                        ),
                        name="jobs_status_started_at_consistency",
                    ),
                ],
            },
        ),
    ]
