---
description: 
globs: 
alwaysApply: true
---
# Core Architecture & Project Constraints

## Tech Stack Requirements
- **Backend**: Python 3.12+ with Django 5.1+ and Django REST Framework 3.15+
- **Task Queue**: Celery 5.4+ with Redis 7.2+ as broker and result backend
- **Database**: PostgreSQL 15+ for persistence with psycopg 3.2+ adapter
- **AI Integration**: OpenAI Python SDK 1.57+ for two-step GPT chain processing
- **Deployment**: Docker Compose for single-command bootstrap
- **Testing**: pytest 8.3+ with pytest-django for 70%+ coverage requirement

**Version Strategy**: These versions ensure compatibility with modern security standards, performance optimizations, and active LTS support. PostgreSQL 15+ provides advanced JSONB features, Django 5.1+ offers improved async support, and Python 3.12+ delivers significant performance improvements over 3.11.

## Performance Requirements
- **POST /jobs** endpoint MUST respond in <200ms
- Support concurrent job processing with atomic operations
- Efficient database queries with proper indexing
- Resource-conscious memory usage
- **Performance Testing**: All job creation operations must be tested to meet <200ms requirement
- **Concurrent Testing**: All status update operations must be tested for race condition safety

## Security Standards
- Never commit `.env` files or API keys
- Input validation and sanitization for all endpoints
- Proper error handling without exposing internals
- Use Django security best practices

## Project Structure Conventions
```
guideline_ingestion/          # Django project root
├── config/                   # Django settings module
│   ├── __init__.py          # Celery app import for shared_task
│   ├── settings.py          # Environment-aware Django settings
│   ├── celery.py           # Celery application configuration
│   ├── urls.py             # URL routing with health endpoints
│   └── wsgi.py             # WSGI application
├── jobs/                     # Main application
│   ├── models.py            # Job model with event_id, status, etc.
│   ├── serializers.py       # DRF serializers
│   ├── views.py             # API endpoints
│   ├── tasks.py             # Celery tasks
│   └── tests/               # Test modules
├── requirements.txt         # Pinned dependencies (Django 5.1+, Celery 5.4+, etc.)
├── docker-compose.yml       # Multi-service setup (Redis 7.2+, PostgreSQL 15+)
├── Dockerfile              # Django app container (Python 3.12+ base)
├── .env                    # Environment variables (gitignored)
├── .env.template           # Environment variables template
└── README.md               # ≤300 words documentation
```

## API Design Principles
- RESTful endpoints with proper HTTP status codes
- Consistent JSON response format
- OpenAPI 3.0 auto-generated documentation
- Error responses with meaningful messages
- Request/response validation using DRF serializers

## Database Design Standards
- Use UUIDs for event_id to avoid collisions
- Job status flow: PENDING → PROCESSING → COMPLETED/FAILED
- Atomic operations for status updates with `select_for_update()` for concurrent safety
- Worker coordination patterns to prevent job conflicts in multi-worker environments
- Proper indexing for performance queries with PostgreSQL 15+ advanced indexing
- JSON fields for storing GPT results using PostgreSQL native JSONB
- Connection pooling with psycopg 3.2+ for optimal performance
- Database constraints for data integrity (check constraints, unique constraints)
- Lifecycle timestamp tracking (started_at, completed_at) for monitoring and analytics

## Environment Configuration Standards
- **Environment-Aware Settings**: Use ENVIRONMENT variable to control development/testing/production behavior
- **Secure Defaults**: Fail securely in production (require SECRET_KEY, OPENAI_API_KEY)
- **Environment Variables**: All configuration via environment variables with sensible defaults
- **Connection Pooling**: PostgreSQL CONN_MAX_AGE=60 with health checks enabled
- **Celery Integration**: Proper task discovery and worker configuration with Redis backend
- **Health Monitoring**: `/health/` and `/health/ready/` endpoints for container orchestration

## Health Endpoint Standards
```python
# Required health endpoints for container orchestration
/health/          # General health check (database + redis connectivity)
/health/ready/    # Readiness probe (all services ready)

# Response format:
{
    "status": "healthy|unhealthy|ready|not_ready",
    "database": "connected",
    "redis": "connected", 
    "timestamp": "ISO-8601",
    "environment": "development|testing|production"
}
```

## Testing Infrastructure Standards
- **Test-Driven Development**: Red → Green → Refactor cycle for all features
- **Docker-First Testing**: All tests run in containerized environment for consistency
- **Coverage Requirements**: Maintain 70%+ test coverage with coverage.py
- **Test Database Isolation**: Use separate test database with transaction rollback
- **External Dependency Mocking**: Mock OpenAI API, Redis, and Celery for reliable tests

### Testing Configuration
```python
# pytest.ini configuration
[tool:pytest]
DJANGO_SETTINGS_MODULE = config.test_settings
testpaths = guideline_ingestion
pythonpath = . guideline_ingestion
addopts = --cov=guideline_ingestion --cov-report=html --cov-fail-under=70

# Test settings (config/test_settings.py)
CELERY_TASK_ALWAYS_EAGER = True  # Synchronous task execution
CELERY_TASK_EAGER_PROPAGATES = True
OPENAI_API_KEY = 'test-api-key'  # Mock API key for testing
```

### Test Structure Standards
```
jobs/tests/
├── conftest.py          # Shared fixtures and test configuration
├── factories.py         # Test data factories using factory_boy
├── mocks.py            # Mock classes for external dependencies
├── test_models.py      # Model unit tests
├── test_views.py       # API endpoint tests
├── test_tasks.py       # Celery task tests
├── test_integration.py # End-to-end integration tests
└── test_performance.py # Performance and load tests
```

### Mock Infrastructure Patterns
```python
# Mock OpenAI API for consistent testing
class MockOpenAIClient:
    def create_chat_completion(self, messages, **kwargs):
        if 'summarize' in str(messages).lower():
            return self._create_summary_response()
        return self._create_checklist_response()

# Context managers for easy mocking
@contextmanager
def mock_openai_client():
    with patch('openai.OpenAI') as mock:
        yield MockOpenAIClient()
```

### Performance Testing Standards
```python
def test_job_creation_performance(performance_timer):
    """Verify POST /jobs responds in <200ms."""
    performance_timer.start()
    response = api_client.post('/jobs/', job_data)
    performance_timer.stop()
    
    assert response.status_code == 201
    assert performance_timer.elapsed_ms < 200
```

### Test Execution Commands
```bash
# Run tests in Docker environment
docker compose exec app /app/test-docker.sh

# Run with coverage reporting
docker compose exec app /app/test-docker.sh --cov-report=html

# Run specific test categories
docker compose exec app /app/test-docker.sh -m unit
docker compose exec app /app/test-docker.sh -m integration

# Run Django setup validation tests
docker compose exec app /app/test-docker.sh jobs/tests/test_django_setup.py
```

## Django Project Standards
- **Setup Validation**: Every Django project MUST include comprehensive setup tests
- **Environment Awareness**: Configuration MUST adapt to development/testing/production environments
- **Docker Integration**: All setup validation MUST pass in containerized environment
- **Admin Access**: Django admin MUST be accessible and functional
- **Health Endpoints**: MUST include `/health/` and `/health/ready/` endpoints

### Required Django Setup Tests
```python
# Minimum required test coverage for Django setup
TestDjangoConfiguration       # Settings, apps, middleware validation
TestDatabaseConnectivity      # Database integration in Docker
TestDjangoRESTFrameworkSetup  # DRF and OpenAPI configuration
TestCeleryIntegration        # Task queue integration
TestURLConfiguration         # URL routing and admin access
TestApplicationStartup       # App loading and performance
TestPerformanceConfiguration # Connection pooling and optimization
```

## Code Quality Standards
- Follow PEP 8 with black formatting
- Type hints for all functions
- Comprehensive docstrings
- Meaningful variable and function names
- DRY principle with reusable utilities
